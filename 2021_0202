현재 주피터 노트북이 있는 경로
  %pwd

strip 메소드를 사용해 공백을 제거
  address.strip()

인덱싱으로 문자 가져오기
  address[0]
  address[-1]
  address[0:5]
------------------------------------------------------------------------------------------------------------------
리스트
  medicine = ["소화제", "감기약 ", "비타민", "해열제"]

append로 "마그네슘" 원소 추가하기
  medicine.append("마그네슘")
  
remove로 원소 삭제하기
  medicine.remove("마그네슘")
  
길이
  len(address)
  len(address_list)

startswith 를 사용하면 특정 문자로 시작하는지 여부를 확인
  address.startswith("서울")
------------------------------------------------------------------------------------------------------------------
제어문
반복문,조건문
  for i in range(5):
      print(i)
---------------------------      
  for i in range(5):
    if i % 2 == 0 : # 짝수
        print(i, "소화제")
    else :
        print(i, "해열제")
---------------------------        
  for m in medicine:
    print(m)
---------------------------   
  for m in medicine :
    if m == "소화제" :
        print(m)
    else :
        print("기타")
---------------------------
enumerate를 사용하면 인덱스 번호와 원소를 같이 가져올 수 있습니다.
  for i, s in enumerate(store) :
      print(i,s) 

------------------------------------------------------------------------------------------------------------------
  def parse_month(date):
      """월을 반환하는 함수"""
      month = date.split(".")[1]
      return month
parse_month(date)

  def parse_phone(phone_num):
      """전화번호의 국번을 반환하는 함수"""
      return phone_num.split("-")[0]
parse_phone("010-1234-1234")
------------------------------------------------------------------------------------------------------------------
  import pandas as pd
  import numpy as np

비어있는 데이터프레임을 생성합니다.
  df = pd.DataFrame()

컬럼 추가하기 
  df["약품명"] = ["소화제", "감기약", "비타민", 
               "digestive", "Omega3", "오메가3", 
               "vitamin", "Vitamin"]
  df["가격"] = 3500
               
컬럼값 변경하기               
  df["가격"] = [3500, 3200, 4000, 3200, 3700, np.nan, 2000, 1000]
  
컬럼 삭제하기
  df = df.drop("지역2", axis = 1)

------------------------------------------------------------------------------------------------------------------
데이터 프레임의 정보
  df.info()

데이터 프레임의 크기를 출력
  (행, 열)
  df.shape

수치형 데이터의 기술통계 값
  df.describe()
  
범주형 데이터의 기술통계 값
  df.describe(include = np.object)

------------------------------------------------------------------------------------------------------------------
컬럼명으로 데이터가져오기
  df["약품명"] -> 데이터 프레임 형태로 보고싶으면 [] 한번 더 감싸주기 
  
  df[["약품명", "가격"]] : 두개 이상의 컬럼을 지정할 때는 리스트형태로

행을 기준으로 데이터 가져오기
  df.loc[[0]] #데이터프레임 형태
  df.loc[0]

  df.loc[[0,1,2]]
  
행과 열을 함께 가져오기
  df.loc[0, "약품명"]
  
특정약품만 가져오기
  df[df["약품명"].str.contains("비타")]
  df[df["약품명"].str.contains("비타|vita")]
 
파생변수 만들기
 df["약품명_소문자"] = df["약품명"].str.lower()

가격이 특정 금액 이상인 것만 가져오기
  df["가격"] > 3500  : TRUE/ FALSE 형태
  df[df["가격"] > 3500] : 데이터프레임 형태
  
정렬하기 
  df.sort_values("가격")
  df.sort_values("가격", ascending = False) #ascending 내림차순정렬

  df.sort_values(["가격", "약품명"], ascending = [False, True])

------------------------------------------------------------------------------------------------------------------
파일저장하기
  to_csv 를 통해 csv 파일로 저장합니다.
  df.to_csv("판다스실습.csv", index = False)
  
저장된 csv 파일을 읽어오기
pd.read_csv("판다스실습.csv")
------------------------------------------------------------------------------------------------------------------
